{"version":3,"sources":["constants/types.js","helpers.js","reducers/imageReducer.js","reducers/categoryReducer.js","reducers/settingsReducer.js","reducers/index.js","store/index.js","constants/config.js","components/FixedMainMenu/index.js","actions/index.js","components/Categories/index.js","components/MasonryGallery/MasonrySlide/index.js","components/MasonryGallery/index.js","components/Wrapper/index.js","components/App.js","index.js"],"names":["LOAD_IMAGES","LOAD_CATEGORIES","CHANGE_OBSERVABLE_CATEGORY","START","SUCCESS","FAILED","arrToMap","arr","RecordModel","arguments","length","undefined","Map","reduce","acc","item","set","id","OrderedMap","mapToArr","obj","valueSeq","toArray","ImageRecord","Record","breeds","categories","url","width","height","defaultState","entities","loading","loaded","CategoryRecord","name","observableCategory","combineReducers","images","state","action","type","payload","update","merge","response","data","settings","enhancer","applyMiddleware","thunk","store","createStore","reducers","compose","relIconURL","relGifURL","homeUrl","window","location","hostname","FixedMainMenu","getLongMenu","react_default","a","createElement","className","href","getShortMenu","src","concat","alt","target","rel","this","Component","APIUrl","request10ImagesByCategory","dispatch","axios","get","then","catch","error","Categories","getBody","_this$props","_this","props","size","getCategories","_this$props2","sort","b","map","category","key","onClick","onClickHandler","changeObservableCategory","filter","image","requestCategories","connect","MasonrySlide","MasonryGallery","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","react","getImages","getLoadButton","MasonryGallery_MasonrySlide","ref","galleryEnd","scrollToBottom","current","scrollIntoView","behavior","React","createRef","Wrapper","getContent","components_Categories","components_MasonryGallery","components_FixedMainMenu","App","es","components_Wrapper","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.d4730024.chunk.js","sourcesContent":["export const LOAD_IMAGES = \"LOAD_IMAGES\";\r\nexport const LOAD_CATEGORIES = \"LOAD_CATEGORIES\";\r\nexport const CHANGE_OBSERVABLE_CATEGORY = \"CHANGE_OBSERVABLE_CATEGORY\";\r\n\r\nexport const START = \"_START\";\r\nexport const SUCCESS = \"_SUCCESS\";\r\nexport const FAILED = \"_FAILED\";","import { Map, OrderedMap } from 'immutable';\r\n\r\nexport function arrToMap( arr, RecordModel = Map ){\r\n    return arr.reduce((acc, item) =>\r\n        acc.set(item.id, new RecordModel(item))\r\n    , new OrderedMap({}));\r\n}\r\n\r\nexport function mapToArr( obj ){\r\n    return obj.valueSeq().toArray();\r\n}","import { Record, OrderedMap } from 'immutable';\r\nimport {\r\n    LOAD_IMAGES,\r\n    START,\r\n    SUCCESS,\r\n    FAILED\r\n} from '../constants/types';\r\nimport { arrToMap } from \"../helpers\";\r\n\r\nconst ImageRecord = Record({\r\n    id: null,\r\n    breeds: [],\r\n    categories: [],\r\n    url: null,\r\n    width: null,\r\n    height: null\r\n});\r\n\r\nconst ReducerState = Record({\r\n    entities: new OrderedMap(arrToMap([], ImageRecord)),\r\n    loading: false,\r\n    loaded: false\r\n});\r\n\r\nconst defaultState = new ReducerState();\r\n\r\nexport default (state = defaultState, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch(type){\r\n        case  LOAD_IMAGES + START:\r\n            return state\r\n                .set('loading', true)\r\n                .set('loaded', false);\r\n\r\n        case  LOAD_IMAGES + SUCCESS:\r\n            return state\r\n                .update('entities', entities => entities.merge(arrToMap(payload.response.data, ImageRecord)))\r\n                .set('loading', false)\r\n                .set('loaded', true);\r\n\r\n        case  LOAD_IMAGES + FAILED:\r\n            return state\r\n                .set('loading', false)\r\n                .set('loaded', false);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { Record, OrderedMap } from 'immutable';\r\nimport {\r\n    LOAD_CATEGORIES,\r\n    START,\r\n    SUCCESS,\r\n    FAILED\r\n} from '../constants/types';\r\nimport { arrToMap } from \"../helpers\";\r\n\r\nconst CategoryRecord = Record({\r\n    id: null,\r\n    name: null\r\n});\r\n\r\nconst ReducerState = Record({\r\n    entities: new OrderedMap(arrToMap([], CategoryRecord)),\r\n    loading: false,\r\n    loaded: false\r\n});\r\n\r\nconst defaultState = new ReducerState();\r\n\r\nexport default (state = defaultState, action) => {\r\n    const {type, payload} = action;\r\n\r\n    switch(type){\r\n        case  LOAD_CATEGORIES + START:\r\n            return state\r\n                .set('loading', true)\r\n                .set('loaded', false);\r\n\r\n        case  LOAD_CATEGORIES + SUCCESS:\r\n            return state.update('entities', entities => entities.merge(arrToMap(payload.response.data, CategoryRecord)))\r\n                .set('loading', false)\r\n                .set('loaded', true);\r\n\r\n        case  LOAD_CATEGORIES + FAILED:\r\n            return state\r\n                .set('loading', false)\r\n                .set('loaded', false);\r\n        default:\r\n            return state;\r\n    }\r\n}","import { Record } from 'immutable';\r\nimport { CHANGE_OBSERVABLE_CATEGORY } from '../constants/types';\r\n\r\n\r\n\r\nconst ReducerState = Record({\r\n    observableCategory: null,\r\n});\r\n\r\nconst defaultState = new ReducerState();\r\n\r\nexport default (state = defaultState, action) => {\r\n    const {type, payload} = action;\r\n\r\n    switch(type){\r\n        case  CHANGE_OBSERVABLE_CATEGORY:\r\n            return state\r\n                .set('observableCategory', payload.id);\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport imageReducer from './imageReducer';\r\nimport categoryReducer from './categoryReducer';\r\nimport settingsReducer from './settingsReducer';\r\n\r\nexport default combineReducers({\r\n    images: imageReducer,\r\n    categories: categoryReducer,\r\n    settings: settingsReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport reducers from '../reducers';\r\n\r\nconst enhancer = applyMiddleware(\r\n    thunk\r\n);\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    compose(enhancer/*, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()*/)\r\n);\r\n\r\n// Dev ONLY!\r\n//window.store = store;\r\n\r\nexport default store;","export const relIconURL = \"./assets/image/icon\";\r\nexport const relGifURL = \"./assets/image/gif\";","import React, {Component} from 'react';\r\nimport {relIconURL} from \"../../constants/config\";\r\n\r\n// For DEV purposes only\r\nconst homeUrl = window.location.hostname === 'localhost' ? \"/\" : \"https://shubat-max.github.io/pawterest/\";\r\n\r\nclass FixedMainMenu extends Component {\r\n\r\n    static propTypes = {};\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={'menu'}>\r\n\r\n                { this.getLongMenu() }\r\n\r\n                { this.getShortMenu() }\r\n\r\n             </div>\r\n        );\r\n    };\r\n\r\n\r\n\r\n    getLongMenu = () => {\r\n        return (\r\n            <div className={'fullmenu'}>\r\n                <div className={'fullmenu--top'}>\r\n                    <a href={homeUrl}>\r\n                        <div><span className={'fullmenu-item'}>Pawterest</span></div>\r\n                    </a>\r\n                </div>\r\n\r\n                <div className={'fullmenu--middle'}>\r\n                    <div><span className={'fullmenu-item'}>My Feed</span></div>\r\n                    <div><span className={'fullmenu-item'}>My Collection</span></div>\r\n                    <div><span className={'fullmenu-item'}>Feed Preferences</span></div>\r\n                    <div className={'fullmenu--middle--drag'}><span /></div>\r\n                </div>\r\n                <div className={'fullmenu--bottom'}>\r\n                    <div><span className={'fullmenu-item'}>Source Code</span></div>\r\n                    <div><span className={'fullmenu-item'}>GitHub</span></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    getShortMenu = () => {\r\n        return (\r\n            <div className={'mainmenu'}>\r\n                <div className={'mainmenu--top'}>\r\n                    <a href={homeUrl}>\r\n                        <div><img src={`${relIconURL}/paw-print.png`} alt=\"Pawterest Logo\" className={'logo'}/></div>\r\n                    </a>\r\n                </div>\r\n\r\n                <div className={'mainmenu--middle'}>\r\n                    <div><img src={`${relIconURL}/house-white.png`} alt=\"White house\"/></div>\r\n                    <div><img src={`${relIconURL}/folder-white.png`} alt=\"White folder\"/></div>\r\n                    <div><img src={`${relIconURL}/cog-white.png`} alt=\"White cog\"/></div>\r\n                </div>\r\n\r\n                <div className={'mainmenu--bottom'}>\r\n                    <a href=\"https://github.com/Shubat-Max/pawterest\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <div><img src={`${relIconURL}/html-coding.png`} alt=\"Project Repository & Source Code\"/></div>\r\n                    </a>\r\n                    <a href=\"https://github.com/Shubat-Max\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <div><img src={`${relIconURL}/github-logo.png`} alt=\"GitHub Account\"/></div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default FixedMainMenu;","import axios from 'axios';\r\nimport {\r\n    LOAD_CATEGORIES,\r\n    LOAD_IMAGES,\r\n    START,\r\n    SUCCESS,\r\n    FAILED, CHANGE_OBSERVABLE_CATEGORY\r\n} from '../constants/types';\r\n\r\nconst APIUrl = 'https://api.thecatapi.com/v1';\r\n\r\nexport function requestCategories(){\r\n    return dispatch => {\r\n        dispatch({\r\n            type: LOAD_CATEGORIES + START\r\n        });\r\n\r\n        axios.get(`${APIUrl}/categories`)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: LOAD_CATEGORIES + SUCCESS,\r\n                    payload: { response }\r\n                });\r\n                dispatch({\r\n                    type: CHANGE_OBSERVABLE_CATEGORY,\r\n                    payload: { id: response.data[0].id }\r\n                });\r\n            })\r\n            .catch(error => dispatch({\r\n                type: LOAD_CATEGORIES + FAILED,\r\n                payload: { error }\r\n            }))\r\n    }\r\n}\r\n\r\nexport function request10ImagesByCategory(id){\r\n    return dispatch => {\r\n        dispatch({\r\n            type: LOAD_IMAGES + START,\r\n            payload: { id }\r\n        });\r\n\r\n        axios.get(`${APIUrl}/images/search?limit=10&category_ids=${id}`)\r\n            .then(response => dispatch({\r\n                type: LOAD_IMAGES + SUCCESS,\r\n                payload: { response }\r\n            }))\r\n            .catch(error => dispatch({\r\n                type: LOAD_IMAGES + FAILED,\r\n                payload: { error }\r\n            }))\r\n    };\r\n}\r\n\r\nexport function changeObservableCategory(id){\r\n    return dispatch => {\r\n        dispatch({\r\n            type: CHANGE_OBSERVABLE_CATEGORY,\r\n            payload: { id }\r\n        })\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {mapToArr} from \"../../helpers\";\r\nimport {\r\n    requestCategories,\r\n    changeObservableCategory,\r\n    request10ImagesByCategory\r\n} from '../../actions';\r\n\r\n\r\nclass Categories extends Component {\r\n\r\n    static propTypes = {\r\n        // -> connect\r\n        categories: PropTypes.array.isRequired,\r\n        loading: PropTypes.bool.isRequired,\r\n        loaded: PropTypes.bool.isRequired,\r\n        images: PropTypes.array.isRequired,\r\n        observableCategory: PropTypes.number.isRequired,\r\n        requestCategories: PropTypes.func.isRequired,\r\n        changeObservableCategory: PropTypes.func.isRequired,\r\n        request10ImagesByCategory: PropTypes.func.isRequired\r\n    };\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.requestCategories();\r\n    };\r\n\r\n    render() {\r\n        return this.getBody();\r\n    };\r\n\r\n\r\n\r\n    getBody = () => {\r\n        const {loaded, loading, categories, observableCategory} = this.props;\r\n\r\n        if(loaded && !loading && categories.size !== 0 && observableCategory !== null ){\r\n            return (\r\n                <div className={'category--block'}>\r\n                    {this.getCategories()}\r\n                </div>\r\n            )\r\n        }else{\r\n            return null;\r\n        }\r\n    };\r\n\r\n    getCategories = () => {\r\n        const { categories, observableCategory } = this.props;\r\n\r\n        return mapToArr(categories).sort((a,b) => {\r\n            if(a.name < b.name) return -1;\r\n            if(a.name > b.name) return 1;\r\n            return 0;\r\n        }).map(category => {\r\n            return (\r\n                <div className={'category--item--outline'} key={category.id} onClick={() => this.onClickHandler(category.id)}>\r\n                    <div className={`category--item--content${observableCategory === category.id ? \"--active\":\"\"}`}>\r\n                        {category.name}\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    };\r\n\r\n\r\n\r\n    onClickHandler = id => {\r\n        this.props.changeObservableCategory(id);\r\n        if(!mapToArr(this.props.images).filter(image => image.categories[0].id === id).length){\r\n            this.props.request10ImagesByCategory(id);\r\n        }\r\n    };\r\n}\r\n\r\nexport default connect(store => {\r\n    return {\r\n        categories: store.categories.entities,\r\n        loading: store.categories.loading,\r\n        loaded: store.categories.loaded,\r\n        images: store.images.entities,\r\n        observableCategory: store.settings.observableCategory\r\n    }\r\n},{\r\n    requestCategories,\r\n    changeObservableCategory,\r\n    request10ImagesByCategory\r\n})(Categories);","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nclass MasonrySlide extends Component {\r\n\r\n    static propTypes = {\r\n        // -> params\r\n        url: PropTypes.string.isRequired\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={'masonry-slide'}>\r\n                <div className={'masonry-slide--wrapper'}>\r\n                    <img src={this.props.url} alt=\"\"/>\r\n                    <div className={'masonry-slide--tools'}>\r\n                        <div className={'masonry-slide--tools--profile'}>\r\n                            <img src=\"https://randomuser.me/api/portraits/men/40.jpg\" alt=\"\" className={'masonry-slide--tools--profile-img'}/>\r\n                            <span className={'masonry-slide--tools--profile-title'}>John Moe</span>\r\n                        </div>\r\n                        <div className={'masonry-slide--tools--more'}><span /></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MasonrySlide;","import React, {Component, Fragment} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {mapToArr} from '../../helpers';\r\nimport {request10ImagesByCategory} from '../../actions';\r\nimport MasonrySlide from './MasonrySlide';\r\nimport {relGifURL} from \"../../constants/config\";\r\n\r\n\r\nclass MasonryGallery extends Component {\r\n\r\n    static propTypes = {\r\n        // -> connect\r\n        observableCategory: PropTypes.number.isRequired,\r\n        images: PropTypes.array.isRequired,\r\n        loading: PropTypes.bool.isRequired,\r\n        loaded: PropTypes.bool.isRequired,\r\n        request10ImagesByCategory: PropTypes.func.isRequired\r\n    };\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.galleryEnd = React.createRef();\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.props.request10ImagesByCategory(this.props.observableCategory)\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    };\r\n\r\n    render() {\r\n        return this.getBody();\r\n    };\r\n\r\n\r\n\r\n    getBody = () => {\r\n        return (\r\n            <Fragment>\r\n                <div className={'masonry-gallery'}>\r\n                    {this.getImages()}\r\n                </div>\r\n                {this.getLoadButton()}\r\n            </Fragment>\r\n        )\r\n    };\r\n\r\n    getImages = () => {\r\n        const {loading, loaded, images, observableCategory} = this.props;\r\n        if((loaded && !loading) || images){\r\n            return mapToArr(images).filter(image => {\r\n                //filter out all non-current-category images\r\n                //TODO: develop check for multiple categories for one image\r\n                return image.categories[0].id === observableCategory\r\n            }).map(image => {\r\n                return <MasonrySlide  url={image.url} key={image.id}/>\r\n            })\r\n        }else{\r\n            return <div>LOADING</div>\r\n        }\r\n    };\r\n\r\n    getLoadButton = () => {\r\n        const {loading, loaded} = this.props;\r\n        if(loaded && !loading){\r\n            return (\r\n                <div className={'loadmore'}>\r\n                    <div\r\n                        className={ 'loadmore__btn' }\r\n                        onClick={ this.onClickHandler }\r\n                        ref={ this.galleryEnd }\r\n                    >\r\n                        LOAD MORE\r\n                    </div>\r\n                </div>\r\n            )\r\n        }else{\r\n            return (\r\n                <div className={'loadmore'}>\r\n                    <div className={ 'loadmore__btn loadmore__loader' }\r\n                         ref={ this.galleryEnd }>\r\n                        <img src={`${relGifURL}/cat_loader.gif`} alt=\"\"/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    };\r\n\r\n\r\n\r\n    onClickHandler = () => {\r\n        this.props.request10ImagesByCategory(this.props.observableCategory);\r\n    };\r\n\r\n    scrollToBottom = () => {\r\n        this.galleryEnd.current.scrollIntoView({\r\n            behavior: 'smooth'\r\n        });\r\n    };\r\n}\r\n\r\nexport default connect(store => {\r\n    return {\r\n        observableCategory: store.settings.observableCategory,\r\n        images: store.images.entities,\r\n        loading: store.images.loading,\r\n        loaded: store.images.loaded\r\n    }\r\n},{\r\n    request10ImagesByCategory\r\n})(MasonryGallery);","import React, {Component, Fragment} from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from \"react-redux\";\r\n\r\nimport FixedMainMenu from '../FixedMainMenu';\r\nimport Categories from '../Categories';\r\nimport MasonryGallery from '../MasonryGallery';\r\n\r\n\r\n\r\nclass Wrapper extends Component {\r\n\r\n    static propTypes = {\r\n        observableCategory: PropTypes.number\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={'wrapper'}>\r\n                <div className={'content'}>\r\n\r\n                    {this.getContent()}\r\n\r\n                </div>\r\n\r\n                <FixedMainMenu />\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getContent = () => {\r\n        if(this.props.observableCategory !== null){\r\n            return (\r\n                <Fragment>\r\n                    <Categories />\r\n                    <MasonryGallery />\r\n                </Fragment>\r\n            )\r\n        } else {\r\n            return <Categories />\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(store => {\r\n    return {\r\n        observableCategory: store.settings.observableCategory\r\n    }\r\n})(Wrapper);","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport store from '../store';\nimport Wrapper from './Wrapper';\nimport './App.scss';\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Wrapper />\n        </Provider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport './reset.css';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}